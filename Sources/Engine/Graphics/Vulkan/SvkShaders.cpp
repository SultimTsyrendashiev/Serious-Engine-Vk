/* Copyright (c) 2020 Sultim Tsyrendashiev
This program is free software; you can redistribute it and/or modify
it under the terms of version 2 of the GNU General Public License as published by
the Free Software Foundation


This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */

#include "stdh.h"
#include <Engine/Graphics/Vulkan/SvkMain.h>

#ifdef SE1_VULKAN

#pragma region Shaders
// these shaders were generated by a script
#include <Engine/Graphics/Vulkan/Shaders/Compiled/TexturedVertSpv.h>
#include <Engine/Graphics/Vulkan/Shaders/Compiled/Textured0FragSpv.h>
#include <Engine/Graphics/Vulkan/Shaders/Compiled/Textured1FragSpv.h>
#include <Engine/Graphics/Vulkan/Shaders/Compiled/Textured2FragSpv.h>
#include <Engine/Graphics/Vulkan/Shaders/Compiled/Textured3FragSpv.h>
#include <Engine/Graphics/Vulkan/Shaders/Compiled/Textured4FragSpv.h>
#include <Engine/Graphics/Vulkan/Shaders/Compiled/TexturedAlpha0FragSpv.h>
#include <Engine/Graphics/Vulkan/Shaders/Compiled/TexturedAlpha1FragSpv.h>
#include <Engine/Graphics/Vulkan/Shaders/Compiled/TexturedAlpha2FragSpv.h>
#include <Engine/Graphics/Vulkan/Shaders/Compiled/TexturedAlpha3FragSpv.h>
#include <Engine/Graphics/Vulkan/Shaders/Compiled/TexturedAlpha4FragSpv.h>
#include <Engine/Graphics/Vulkan/Shaders/Compiled/OcclusionCheckVertSpv.h>
#include <Engine/Graphics/Vulkan/Shaders/Compiled/OcclusionCheckFragSpv.h>

extern unsigned char TexturedVert_Spirv[];
extern unsigned int TexturedVert_Size;

extern unsigned char Textured0Frag_Spirv[];
extern unsigned int Textured0Frag_Size;
extern unsigned char Textured1Frag_Spirv[];
extern unsigned int Textured1Frag_Size;
extern unsigned char Textured2Frag_Spirv[];
extern unsigned int Textured2Frag_Size;
extern unsigned char Textured3Frag_Spirv[];
extern unsigned int Textured3Frag_Size;
extern unsigned char Textured4Frag_Spirv[];
extern unsigned int Textured4Frag_Size;

extern unsigned char TexturedAlpha0Frag_Spirv[];
extern unsigned int TexturedAlpha0Frag_Size;
extern unsigned char TexturedAlpha1Frag_Spirv[];
extern unsigned int TexturedAlpha1Frag_Size;
extern unsigned char TexturedAlpha2Frag_Spirv[];
extern unsigned int TexturedAlpha2Frag_Size;
extern unsigned char TexturedAlpha3Frag_Spirv[];
extern unsigned int TexturedAlpha3Frag_Size;
extern unsigned char TexturedAlpha4Frag_Spirv[];
extern unsigned int TexturedAlpha4Frag_Size;

extern unsigned char OcclusionCheckVert_Spirv[];
extern unsigned int OcclusionCheckVert_Size;
extern unsigned char OcclusionCheckFrag_Spirv[];
extern unsigned int OcclusionCheckFrag_Size;
#pragma endregion

void SvkMain::CreateShaderModules()
{
  gl_VkShaderModuleVert = CreateShaderModule((uint32_t *)TexturedVert_Spirv, TexturedVert_Size);
  gl_VkShaderModuleVertOcclusion = CreateShaderModule((uint32_t *)OcclusionCheckVert_Spirv, OcclusionCheckVert_Size);
  gl_VkShaderModuleFragOcclusion = CreateShaderModule((uint32_t *)OcclusionCheckFrag_Spirv, OcclusionCheckFrag_Size);

  gl_VkShaderModulesFrag[0] = CreateShaderModule((uint32_t *)Textured0Frag_Spirv, Textured0Frag_Size);
  gl_VkShaderModulesFrag[1] = CreateShaderModule((uint32_t *)Textured1Frag_Spirv, Textured1Frag_Size);
  gl_VkShaderModulesFrag[2] = CreateShaderModule((uint32_t *)Textured2Frag_Spirv, Textured2Frag_Size);
  gl_VkShaderModulesFrag[3] = CreateShaderModule((uint32_t *)Textured3Frag_Spirv, Textured3Frag_Size);
  gl_VkShaderModulesFrag[4] = CreateShaderModule((uint32_t *)Textured4Frag_Spirv, Textured4Frag_Size);
 
  gl_VkShaderModulesFragAlpha[0] = CreateShaderModule((uint32_t *)TexturedAlpha0Frag_Spirv, TexturedAlpha0Frag_Size);
  gl_VkShaderModulesFragAlpha[1] = CreateShaderModule((uint32_t *)TexturedAlpha1Frag_Spirv, TexturedAlpha1Frag_Size);
  gl_VkShaderModulesFragAlpha[2] = CreateShaderModule((uint32_t *)TexturedAlpha2Frag_Spirv, TexturedAlpha2Frag_Size);
  gl_VkShaderModulesFragAlpha[3] = CreateShaderModule((uint32_t *)TexturedAlpha3Frag_Spirv, TexturedAlpha3Frag_Size);
  gl_VkShaderModulesFragAlpha[4] = CreateShaderModule((uint32_t *)TexturedAlpha4Frag_Spirv, TexturedAlpha4Frag_Size);
}

void SvkMain::DestroyShaderModules()
{
  vkDestroyShaderModule(gl_VkDevice, gl_VkShaderModuleVert, nullptr);
  vkDestroyShaderModule(gl_VkDevice, gl_VkShaderModuleVertOcclusion, nullptr);
  vkDestroyShaderModule(gl_VkDevice, gl_VkShaderModuleFragOcclusion, nullptr);

  for (uint32_t i = 0; i < SVK_SHADER_MODULE_COUNT; i++)
  {
    vkDestroyShaderModule(gl_VkDevice, gl_VkShaderModulesFrag[i], nullptr);
    vkDestroyShaderModule(gl_VkDevice, gl_VkShaderModulesFragAlpha[i], nullptr);
  }
}

#endif